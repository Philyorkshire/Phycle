@using System.Globalization
@using CyclePro.Data


<h2 class="header-title">Interval Data</h2>


@{ 
    var count = 0;
    var counter = 0;
    var unitSpeed = "mph";
    var unitLength = "ft";
    var unitDistance = "mile/s";

    var indexes = Hrm.PrimaryHrm.GetIntervalIndexes();
        
    if (Hrm.PrimaryHrm.Features.Euro)
    {
        unitSpeed = "km/h";
        unitLength = "m";
        unitDistance = "km";
    }
}


<script src="../../Scripts/Chart.js"></script>

<div class="wrapper">
    <section class="graph">
        <script src="../../Scripts/Chart.js"></script>
        <div>
            <canvas id="canvas" height="200"></canvas>
        </div>
    </section>

    <section class="editGraph">
            <table cellpadding="0" cellspacing="0" id="our_table">
                <tr>
                    @for (var i = 0; i <= Hrm.PrimaryHrm.Data.Count; i++)
                    {
                        if (count == 0 || count%10 == 0)
                        {
                            if (indexes.Contains(count))
                            {
                                <td data-id="@i" class="highlighted"></td>
                            }

                            else
                            {
                                <td data-id="@i"></td>
                            }

                        }
                        count++;
                    }
                </tr>
            </table>
        </section>
    </div>

@foreach(var interval in Hrm.PrimaryHrm.HrmIntervals)
{
    counter = counter + 1;
    
    <div class="row">
        <section class="one-third column">
            <h1>@counter</h1>
        </section>

        <section class="one-third column">
            <h5>Summary Data</h5>
            <table>
                <tr>
                    <td></td>
                    <td>Highest</td>
                    <td>Lowest</td>
                    <td>Average</td>
                </tr>

                @if (Hrm.PrimaryHrm.Features.Speed)
                {
                    <tr>
                        <td>Speed (@unitSpeed)</td>
                        <td>@Math.Round(interval.GetHighest("speed"), 2)</td>
                        <td>@Math.Round(interval.GetLowest("speed"), 2)</td>
                        <td>@Math.Round(interval.GetAverage("speed"), 2)</td>
                    </tr>
                }

                <tr>
                    <td>Heart Rate (bpm)</td>
                    <td>@interval.GetHighest("hr")</td>
                    <td>@interval.GetLowest("hr")</td>
                    <td>@interval.GetAverage("hr")</td>
                </tr>

                @if (Hrm.PrimaryHrm.Features.Cadence)
                {
                    <tr>
                        <td>Cadence (rpm)</td>
                        <td>@interval.GetHighest("cadence")</td>
                        <td>@interval.GetLowest("cadence")</td>
                        <td>@interval.GetAverage("cadence")</td>
                    </tr>
                }

                @if (Hrm.PrimaryHrm.Features.Altitude)
                {
                    <tr>
                        <td>Altitude (@unitLength)</td>
                        <td>@Math.Round(interval.GetHighest("altitude"), 2)</td>
                        <td>@Math.Round(interval.GetLowest("altitude"), 2)</td>
                        <td>@Math.Round(interval.GetAverage("altitude"), 2)</td>
                    </tr>
                }


                <tr>
                    <td>Interval Distance (@unitDistance)</td>
                    <td>@Math.Round(interval.GetHighest("distance"), 2)</td>
                    <td>@Math.Round(interval.GetLowest("distance"), 2)</td>
                    <td>@Math.Round(interval.GetAverage("distance"), 2)</td>
                </tr>

                @if (Hrm.PrimaryHrm.Features.Power)
                {
                    <tr>
                        <td>Power</td>
                        <td>@interval.GetHighest("power")</td>
                        <td>@interval.GetLowest("power")</td>
                        <td>@interval.GetAverage("power")</td>
                    </tr>
                }

                @if (Hrm.PrimaryHrm.Features.Pressure)
                {
                    <tr>
                        <td>Pressure</td>
                        <td>@interval.GetHighest("pressure")</td>
                        <td>@interval.GetLowest("pressure")</td>
                        <td>@interval.GetAverage("pressure")</td>
                    </tr>
                }
            </table>
        </section>

        <section class="one-third column">
            <h5>Totals</h5>
            <table>
                <tr>
                    <td>Distance Travelled (@unitDistance)</td>
                    <td>Power Generated (Watts)</td>
                    <td>Data Rows</td>
                </tr>
                <tr>
                    <td>@Math.Round(interval.TotalDistance(), 2)</td>
                    <td>@interval.PowerGenerated().ToString(CultureInfo.InvariantCulture)</td>
                    <td>@interval.Count()</td>
                </tr>
            </table>
        </section>

    </div>
}

<script>
        var lineChartData = {
            labels: [ @foreach (var i in Hrm.PrimaryHrm.Data)
                      {
                         <text>"@i.DateTime",</text>

                      }],
            datasets: [
                {
                    label: "Heart Rate",
                    fillColor: "rgba(220,220,220,0.2)",
                    strokeColor: "rgba(220,220,220,1)",
                    pointColor: "rgba(220,220,220,1)",
                    pointStrokeColor: "#fff",
                    pointHighlightFill: "#fff",
                    pointHighlightStroke: "rgba(220,220,220,1)",
                    data: [
                        @foreach (var i in Hrm.PrimaryHrm.Data)
                        {
                            <text>@i.Hr,</text>
                        }
                    ]
                },
                {
                    label: "Speed",
                    fillColor: "rgba(176,23,31,0.2)",
                    strokeColor: "rgba(176,23,31,1)",
                    pointColor: "rgba(176,23,31,1)",
                    pointStrokeColor: "#fff",
                    pointHighlightFill: "#fff",
                    pointHighlightStroke: "rgba(176,23,31,1)",
                    data: [
                        @foreach (var i in Hrm.PrimaryHrm.Data)
                        {
                            <text>@i.Speed,</text>
                        }
                    ]
                },
                {
                    label: "Cadence",
                    fillColor: "rgba(138, 43, 226,0.2)",
                    strokeColor: "rgba(138, 43, 226,1)",
                    pointColor: "rgba(138, 43, 226,1)",
                    pointStrokeColor: "#fff",
                    pointHighlightFill: "#fff",
                    pointHighlightStroke: "rgba(138, 43, 226,1)",
                    data: [
                        @foreach (var i in Hrm.PrimaryHrm.Data)
                        {
                            <text>@i.Cadence,</text>
                        }
                    ]
                },
                {
                    label: "Power",
                    fillColor: "rgba(34, 139, 34,0.2)",
                    strokeColor: "rgba(34, 139, 34,1)",
                    pointColor: "rgba(34, 139, 34,1)",
                    pointStrokeColor: "#fff",
                    pointHighlightFill: "#fff",
                    pointHighlightStroke: "rgba(34, 139, 34,1)",
                    data: [
                        @foreach (var i in Hrm.PrimaryHrm.Data)
                        {
                            <text>@i.Power,</text>
                        }
                    ]
                }
            ]

        }
        window.onload = function () {
            var ctx = document.getElementById("canvas").getContext("2d");
            window.myLine = new Chart(ctx).Line(lineChartData, {
                responsive: true,
                pointDot: false,
                pointDotRadious: 0,
                animation: false,
                datasetStroke: false,
                scaleShowVerticalLines: false,
                scaleShowLabels: true,
                skipLabels: true,
                showXLabels: 20
            });
        }


    </script>